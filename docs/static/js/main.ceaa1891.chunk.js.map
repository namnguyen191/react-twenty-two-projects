{"version":3,"sources":["shared/components/AppleNavbar/AppleNavbar.tsx","shared/components/ParallaxCard/ParallaxCard.tsx","pages/Projects/InfinityScroll/InfinityScroll.tsx","pages/Projects/PictureInPicture/PictureInPicture.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AppleNavbar","props","children","className","role","ParallaxCard","cardContainerRef","useRef","cardRef","cardBgRef","title","text","width","height","imageUrl","onMouseMove","event","current","Error","mouseX","pageX","offsetLeft","rX","mouseY","pageY","offsetTop","rY","style","transform","tX","tY","onMouseLeave","ref","backgroundImage","InfinityScroll","useState","photos","setPhotos","loading","getPhotos","a","console","log","axios","get","res","curPhotos","data","loadMoreImage","window","scrollY","document","body","offsetHeight","readyState","useEffect","process","addEventListener","removeEventListener","imagesNodes","i","length","push","href","links","html","target","rel","src","urls","regular","alt","alt_description","renderImages","PictureInPicture","vidEleRef","selectMediaStream","navigator","mediaDevices","getDisplayMedia","mediaStream","vidEle","srcObject","onloadedmetadata","play","handleClick","e","btn","disabled","requestPictureInPicture","hidden","controls","onClick","Home","React","lazy","QuoteGenerator","App","to","fontSize","Suspense","fallback","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ceaa1891.chunk.js","sourcesContent":["import { PropsWithChildren } from 'react';\nimport './AppleNavbarStyles.scss';\n\nexport type AppleNavbarProps = {};\n\nconst AppleNavbar: React.FC<PropsWithChildren<AppleNavbarProps>> = (props) => {\n  const { children } = props;\n\n  return (\n    <nav className=\"apple-nav\" role=\"navigation\">\n      <ul className=\"nav-items\">{children}</ul>\n    </nav>\n  );\n};\n\nexport default AppleNavbar;\n","import { useRef } from 'react';\nimport './ParallaxCardStyles.scss';\n\nexport type ParallaxCardProps = {\n  /**\n   * The title of the card, keep it short which will be an <h1> element\n   */\n  title: string;\n  /**\n   * The text paragraph, which will be a <p> element. Keep this short for best visual\n   */\n  text: string;\n  /**\n   * The url of the background image\n   */\n  imageUrl: string;\n  /**\n   * The width of the card in pixel. Default is 240\n   */\n  width?: number;\n  /**\n   * The height of the card in pixel. Default is 320\n   */\n  height?: number;\n};\n\nconst ParallaxCard: React.FC<ParallaxCardProps> = (props) => {\n  const cardContainerRef = useRef<HTMLDivElement>(null);\n  const cardRef = useRef<HTMLDivElement>(null);\n  const cardBgRef = useRef<HTMLDivElement>(null);\n\n  const { title, text, width = 240, height = 320, imageUrl } = props;\n\n  const handleMouseMove = (\n    event: React.MouseEvent<HTMLDivElement, MouseEvent>\n  ) => {\n    if (\n      cardRef &&\n      cardRef.current &&\n      cardContainerRef &&\n      cardContainerRef.current &&\n      cardBgRef &&\n      cardBgRef.current\n    ) {\n      const mouseX =\n        (event.pageX - cardContainerRef.current.offsetLeft - width / 2) / width;\n      const rX = mouseX * 30;\n      const mouseY =\n        (event.pageY - cardContainerRef.current.offsetTop - height / 2) /\n        height;\n      const rY = mouseY * -30;\n      cardRef.current.style.transform = `rotateY(${rX}deg) rotateX(${rY}deg)`;\n\n      const tX = mouseX * -40;\n      const tY = mouseY * -40;\n      cardBgRef.current.style.transform = `translateX(${tX}px) translateY(${tY}px)`;\n    } else {\n      return new Error('Element ref is not setting up correctly');\n    }\n  };\n\n  const handleMouseLeave = () => {\n    if (\n      cardRef &&\n      cardRef.current &&\n      cardContainerRef &&\n      cardContainerRef.current &&\n      cardBgRef &&\n      cardBgRef.current\n    ) {\n      cardRef.current.style.transform = `rotateY(0deg) rotateX(0deg)`;\n      cardBgRef.current.style.transform = `translateX(0px) translateY(0px)`;\n    }\n  };\n\n  return (\n    <div\n      className=\"parallax-card-container\"\n      onMouseMove={handleMouseMove}\n      onMouseLeave={handleMouseLeave}\n      ref={cardContainerRef}\n    >\n      <div\n        className=\"card\"\n        ref={cardRef}\n        style={{\n          width: width + 'px',\n          height: height + 'px',\n        }}\n      >\n        <div\n          className=\"card-bg\"\n          ref={cardBgRef}\n          style={{\n            backgroundImage: `url(${imageUrl})`,\n          }}\n        ></div>\n        <div className=\"card-info\">\n          <h1 className=\"title\">{title}</h1>\n          <p className=\"text\">{text}</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ParallaxCard;\n","import axios from 'axios';\nimport { ReactElement, useEffect, useState } from 'react';\nimport './InfinityScrollStyles.scss';\n\ntype Photo = {\n  alt_description: string;\n  urls: { regular: string };\n  links: { html: string };\n};\n\nconst TITLE = process.env.REACT_APP_APP_NAME + ' - Infinity Scroll';\n\nconst InfinityScroll: React.FC = () => {\n  const [photos, setPhotos] = useState<Photo[]>([]);\n  let loading = false;\n\n  const unsplashAPIUrl = 'https://api.unsplash.com';\n  const photoCount = 10;\n  const apiKey = '4xDG69iCRcPnbgDOKIH7qbERYgRwFpaaJhFH1m4bOjk';\n\n  const getPhotos = async () => {\n    console.log('Trigger getting photos');\n\n    loading = true;\n    const res = await axios.get<Photo[]>(\n      `${unsplashAPIUrl}/photos/random?client_id=${apiKey}&count=${photoCount}`\n    );\n    loading = false;\n    setPhotos((curPhotos) => [...curPhotos, ...res.data]);\n  };\n\n  const loadMoreImage = () => {\n    if (\n      window.scrollY > document.body.offsetHeight - 1000 &&\n      !loading &&\n      document.readyState === 'complete'\n    ) {\n      getPhotos();\n    }\n  };\n\n  const activateInfiniteScroll = () => {\n    window.addEventListener('scroll', loadMoreImage);\n  };\n\n  useEffect(() => {\n    document.title = TITLE;\n\n    getPhotos();\n\n    activateInfiniteScroll();\n\n    return () => {\n      window.removeEventListener('scroll', loadMoreImage);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const renderImages = (): ReactElement[] => {\n    let imagesNodes: ReactElement[] = [];\n\n    for (let i = 0; i < photos.length; i++) {\n      imagesNodes.push(\n        <a key={i} href={photos[i].links.html} target=\"_blank\" rel=\"noreferrer\">\n          <img\n            src={photos[i].urls.regular}\n            alt={photos[i].alt_description}\n            title={photos[i].alt_description}\n          />\n        </a>\n      );\n    }\n\n    return imagesNodes;\n  };\n\n  return (\n    <div className=\"infinity-scroll-container\">\n      <h1>Unsplash API - Infinite Scroll</h1>\n      {/* <img src=\"/images/loading-infinity.svg\" alt=\"Loader\" /> */}\n      <div className=\"img-container\">{renderImages()}</div>\n      <img src=\"/images/loading-infinity.svg\" alt=\"Loader Icon\" />\n    </div>\n  );\n};\n\nexport default InfinityScroll;\n","import { MouseEvent, useEffect, useRef } from 'react';\nimport './PictureInPictureStyles.scss';\n\nconst TITLE = process.env.REACT_APP_APP_NAME + ' - Picture in Picture';\n\nconst PictureInPicture: React.FC = () => {\n  const vidEleRef = useRef<HTMLVideoElement>(null);\n\n  useEffect(() => {\n    document.title = TITLE;\n    selectMediaStream();\n  });\n\n  const selectMediaStream = async () => {\n    try {\n      const mediaStream = await (\n        navigator.mediaDevices as any\n      ).getDisplayMedia();\n\n      if (vidEleRef && vidEleRef.current) {\n        const vidEle = vidEleRef.current;\n        vidEle.srcObject = mediaStream;\n        vidEle.onloadedmetadata = () => {\n          vidEle.play();\n        };\n      }\n    } catch (err) {}\n  };\n\n  const handleClick = async (e: MouseEvent<HTMLButtonElement>) => {\n    const btn = e.target as HTMLButtonElement;\n\n    btn.disabled = true;\n\n    if (vidEleRef && vidEleRef.current) {\n      await (vidEleRef.current as any).requestPictureInPicture();\n      btn.disabled = false;\n      vidEleRef.current.hidden = true;\n    }\n  };\n\n  return (\n    <div className=\"picture-in-picture-container\">\n      {/* Video */}\n      <video src=\"\" controls height=\"360\" width=\"640\" ref={vidEleRef}></video>\n\n      {/* Button */}\n      <div className=\"btn-container\">\n        <button onClick={handleClick}>Start</button>\n      </div>\n    </div>\n  );\n};\n\nexport default PictureInPicture;\n","import React from 'react';\nimport { BrowserRouter as Router, Link, Route, Switch } from 'react-router-dom';\nimport './AppStyles.scss';\nimport InfinityScroll from './pages/Projects/InfinityScroll/InfinityScroll';\nimport PictureInPicture from './pages/Projects/PictureInPicture/PictureInPicture';\nimport { AppleNavbar } from './shared/components';\n\nconst Home = React.lazy(() => import('./pages/Home/Home'));\nconst QuoteGenerator = React.lazy(\n  () => import('./pages/Projects/QuoteGenerator/QuoteGenerator')\n);\n\nconst App: React.FC = () => {\n  return (\n    <Router>\n      <AppleNavbar>\n        <Link to=\"/\">Home</Link>\n        <Link to=\"/\">\n          <i style={{ fontSize: '2.7rem' }} className=\"fab fa-github\"></i>\n        </Link>\n      </AppleNavbar>\n      <Switch>\n        <React.Suspense fallback={<p>Loading</p>}>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"/project/quote-generator\">\n            <QuoteGenerator />\n          </Route>\n          <Route path=\"/project/infinity-scroll\">\n            <InfinityScroll />\n          </Route>\n          <Route path=\"/project/picture-in-picture\">\n            <PictureInPicture />\n          </Route>\n        </React.Suspense>\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './globalStyles.scss';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}